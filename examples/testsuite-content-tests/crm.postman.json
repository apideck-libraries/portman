{
  "_": {
    "postman_id": "90901a91-1bf4-43bb-90f7-b82d7e4a57e2"
  },
  "item": [
    {
      "id": "94439758-4807-426f-b9ba-46e1d849aff1",
      "name": "Leads",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "eb2676d8-28bd-43f3-b094-f504aecf6ba1",
          "name": "List leads",
          "request": {
            "name": "List leads",
            "description": {
              "content": "List leads",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "crm",
                "leads"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Include raw response. Mostly used for debugging purposes",
                    "type": "text/plain"
                  },
                  "key": "raw",
                  "value": "true"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Number of records to return",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": "20"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "(Required) ID of the consumer which you want to get or push data from",
                  "type": "text/plain"
                },
                "key": "x-apideck-consumer-id",
                "value": "my-consumer-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "(Required) The ID of your Unify application",
                  "type": "text/plain"
                },
                "key": "x-apideck-app-id",
                "value": "my-app-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.",
                  "type": "text/plain"
                },
                "key": "x-apideck-service-id",
                "value": "pipedrive"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "any",
                  "value": "<Bearer Token>",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d0d29e5c-5ee6-44ac-817d-cda2b5d53db0",
                "type": "text/javascript",
                "exec": [
                  "// Set response object as internal variable\nlet jsonData = {};\ntry {jsonData = pm.response.json();}catch(e){}\n",
                  "// Set property value as variable\nconst _resData0CompanyName = jsonData?.data?.[0]?.company_name;\n",
                  "// Response body should have \"data[0].company_name\"\npm.test(\"[GET]::/crm/leads - Content check if 'data[0].company_name' exists\", function() {\n   pm.expect(_resData0CompanyName !== undefined).to.be.true;\n});\n",
                  "// Response body should have value \"Spacex\" for \"data[0].company_name\"\nif (_resData0CompanyName !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value for 'data[0].company_name' matches 'Spacex'\", function() {\n  pm.expect(jsonData.data[0].company_name).to.eql(\"Spacex\");\n})};\n",
                  "// Set property value as variable\nconst _resData0Name = jsonData?.data?.[0]?.name;\n",
                  "// Response body should have \"data[0].name\"\npm.test(\"[GET]::/crm/leads - Content check if 'data[0].name' exists\", function() {\n   pm.expect(_resData0Name !== undefined).to.be.true;\n});\n",
                  "// Response body should contain value \"Musk\" for \"data[0].name\"\nif (_resData0Name !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value for 'data[0].name' contains 'Musk'\", function() {\n  pm.expect(jsonData.data[0].name).to.include(\"Musk\");\n})};\n",
                  "// Set property value as variable\nconst _resStatusCode = jsonData?.status_code;\n",
                  "// Response body should have \"status_code\"\npm.test(\"[GET]::/crm/leads - Content check if 'status_code' exists\", function() {\n   pm.expect(_resStatusCode !== undefined).to.be.true;\n});\n",
                  "// Response body should be one of the values \"200,201\" for \"status_code\"\nif (_resStatusCode !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value for 'status_code' is matching one of: '200,201'\", function() {\n  pm.expect(jsonData.status_code).to.be.oneOf([200,201]);\n})};\n",
                  "// Set property value as variable\nconst _resData0MonetaryAmount = jsonData?.data?.[0]?.monetary_amount;\n",
                  "// Response body should have \"data[0].monetary_amount\"\npm.test(\"[GET]::/crm/leads - Content check if 'data[0].monetary_amount' exists\", function() {\n   pm.expect(_resData0MonetaryAmount !== undefined).to.be.true;\n});\n",
                  "// Response body should have value \"75000\" for \"data[0].monetary_amount\"\nif (_resData0MonetaryAmount !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value for 'data[0].monetary_amount' matches '75000'\", function() {\n  pm.expect(jsonData.data[0].monetary_amount).to.eql(75000);\n})};\n",
                  "// Set property value as variable\nconst _resData0Description = jsonData?.data?.[0]?.description;\n",
                  "// Response body should have \"data[0].description\"\npm.test(\"[GET]::/crm/leads - Content check if 'data[0].description' exists\", function() {\n   pm.expect(_resData0Description !== undefined).to.be.true;\n});\n",
                  "// Response body should have a length of \"9\" for \"data[0].description\"\nif (_resData0Description !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value of 'data[0].description' has a length of '9'\", function() {\n  pm.expect(jsonData.data[0].description.length).to.equal(9);\n})};\n",
                  "// Set property value as variable\nconst _resData = jsonData?.data;\n",
                  "// Response body should have \"data\"\npm.test(\"[GET]::/crm/leads - Content check if 'data' exists\", function() {\n   pm.expect(_resData !== undefined).to.be.true;\n});\n",
                  "// Response body should have a minimum length of \"1\" for \"data\"\nif (_resData !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value of 'data' has a minimum length of '1'\", function() {\n  pm.expect(jsonData.data.length).is.at.least(1);\n})};\n",
                  "// Response body should have a maximum length of \"20\" for \"data\"\nif (_resData !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value of 'data' has a maximum length of '20'\", function() {\n  pm.expect(jsonData.data.length).is.at.most(20);\n})};\n",
                  "// Set property value as variable\nconst _resResource = jsonData?.resource;\n",
                  "// Response body should have \"resource\"\npm.test(\"[GET]::/crm/leads - Content check if 'resource' exists\", function() {\n   pm.expect(_resResource !== undefined).to.be.true;\n});\n",
                  "// Response body should have value \"companies\" for \"resource\"\nif (_resResource !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value for 'resource' matches 'companies'\", function() {\n  pm.expect(jsonData.resource).to.eql(\"companies\");\n})};\n",
                  "// Set property value as variable\nconst _resCount = jsonData?.[\"@count\"];\n",
                  "// Response body should not have \"@count\"\npm.test(\"[GET]::/crm/leads - Content check if '@count' not exists\", function() {\n   pm.expect(_resCount === undefined).to.be.true;\n});\n",
                  "// Set property value as variable\nconst _resService = jsonData?.service;\n",
                  "// Response body should have \"service\"\npm.test(\"[GET]::/crm/leads - Content check if 'service' exists\", function() {\n   pm.expect(_resService !== undefined).to.be.true;\n});\n",
                  "// Response body value for \"service\" \"not.to.be.undefined\"\nif (_resService !== undefined) {\npm.test(\"[GET]::/crm/leads - Content check if value for 'service' 'not.to.be.undefined'\", function() {\n  pm.expect(jsonData.service).not.to.be.undefined;\n})};\n"
                ]
              }
            }
          ]
        },
        {
          "id": "61b29e87-d63f-40dd-a0c6-ca3ea9c20035",
          "name": "Create lead",
          "request": {
            "name": "Create lead",
            "description": {
              "content": "Create lead",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "crm",
                "leads"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Include raw response. Mostly used for debugging purposes",
                    "type": "text/plain"
                  },
                  "key": "raw",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "(Required) ID of the consumer which you want to get or push data from",
                  "type": "text/plain"
                },
                "key": "x-apideck-consumer-id",
                "value": "my-consumer-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "(Required) The ID of your Unify application",
                  "type": "text/plain"
                },
                "key": "x-apideck-app-id",
                "value": "my-app-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.",
                  "type": "text/plain"
                },
                "key": "x-apideck-service-id",
                "value": "pipedrive"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Elon Musk\",\n  \"company_name\": \"Spacex\",\n  \"owner_id\": \"54321\",\n  \"company_id\": \"2\",\n  \"contact_id\": \"2\",\n  \"first_name\": \"Elon\",\n  \"last_name\": \"Musk\",\n  \"description\": \"A thinker\",\n  \"prefix\": \"Sir\",\n  \"title\": \"CEO\",\n  \"status\": \"New\",\n  \"monetary_amount\": 75000,\n  \"currency\": \"USD\",\n  \"fax\": \"+12129876543\",\n  \"websites\": [\n    {\n      \"url\": \"http://example.com\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    },\n    {\n      \"url\": \"http://example.com\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    }\n  ],\n  \"addresses\": [\n    {\n      \"id\": \"123\",\n      \"type\": \"primary\",\n      \"name\": \"HQ US\",\n      \"line1\": \"Main street\",\n      \"line2\": \"apt #\",\n      \"city\": \"San Francisco\",\n      \"state\": \"CA\",\n      \"postal_code\": \"94104\",\n      \"country\": \"US\",\n      \"latitude\": \"40.759211\",\n      \"longitude\": \"-73.984638\"\n    },\n    {\n      \"id\": \"123\",\n      \"type\": \"primary\",\n      \"name\": \"HQ US\",\n      \"line1\": \"Main street\",\n      \"line2\": \"apt #\",\n      \"city\": \"San Francisco\",\n      \"state\": \"CA\",\n      \"postal_code\": \"94104\",\n      \"country\": \"US\",\n      \"latitude\": \"40.759211\",\n      \"longitude\": \"-73.984638\"\n    }\n  ],\n  \"social_links\": [\n    {\n      \"url\": \"https://www.twitter.com/apideck-io\",\n      \"id\": \"12345\",\n      \"type\": \"twitter\"\n    },\n    {\n      \"url\": \"https://www.twitter.com/apideck-io\",\n      \"id\": \"12345\",\n      \"type\": \"twitter\"\n    }\n  ],\n  \"phone_numbers\": [\n    {\n      \"number\": \"111-111-1111\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    },\n    {\n      \"number\": \"111-111-1111\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    }\n  ],\n  \"emails\": [\n    {\n      \"email\": \"elon@musk.com\",\n      \"id\": \"123\",\n      \"type\": \"primary\"\n    },\n    {\n      \"email\": \"elon@musk.com\",\n      \"id\": \"123\",\n      \"type\": \"primary\"\n    }\n  ],\n  \"custom_fields\": [\n    {\n      \"id\": \"custom_technologies\",\n      \"value\": \"Uses Salesforce and Marketo\"\n    },\n    {\n      \"id\": \"custom_technologies\",\n      \"value\": \"Uses Salesforce and Marketo\"\n    }\n  ],\n  \"tags\": [\n    \"New\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "any",
                  "value": "<Bearer Token>",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "7f4d4a96-f288-4a87-8c10-b3b103269a45",
          "name": "Get lead",
          "request": {
            "name": "Get lead",
            "description": {
              "content": "Get lead",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "crm",
                "leads",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Include raw response. Mostly used for debugging purposes",
                    "type": "text/plain"
                  },
                  "key": "raw",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of the record you are acting upon.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "1234567890ABC",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "(Required) ID of the consumer which you want to get or push data from",
                  "type": "text/plain"
                },
                "key": "x-apideck-consumer-id",
                "value": "my-consumer-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "(Required) The ID of your Unify application",
                  "type": "text/plain"
                },
                "key": "x-apideck-app-id",
                "value": "my-app-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.",
                  "type": "text/plain"
                },
                "key": "x-apideck-service-id",
                "value": "pipedrive"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "any",
                  "value": "<Bearer Token>",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "21dab425-5167-48df-9db1-eb3137db4d4c",
                "type": "text/javascript",
                "exec": [
                  "// Validate if response header is present \npm.test(\"[GET]::/crm/leads/:id - Response header Operation-Location is present\", function () {\n   pm.response.to.have.header(\"Operation-Location\");\n});\n",
                  "// Response header should have value \"/operations/123\" for \"Operation-Location\"\npm.test(\"[GET]::/crm/leads/:id - Content check if header value for 'Operation-Location' matches '/operations/123'\", function() {\n  pm.expect(pm.response.headers.get(\"Operation-Location\")).to.eql(\"/operations/123\");\n});\n",
                  "// Response header should contain value \"/operations/\" for \"Operation-Location\"\npm.test(\"[GET]::/crm/leads/:id - Content check if header value for 'Operation-Location' contains '/operations/'\", function() {\n  pm.expect(pm.response.headers.get(\"Operation-Location\")).to.include(\"/operations/\");\n});\n",
                  "// Response header should have a length of \"15\" for \"Operation-Location\"\npm.test(\"[GET]::/crm/leads/:id - Content check if header value of 'Operation-Location' has a length of '15'\", function() {\n  pm.expect(pm.response.headers.get(\"Operation-Location\")).to.have.lengthOf(15);\n});\n",
                  "// Response header should have a minimum length of \"5\" for \"Operation-Location\"\npm.test(\"[GET]::/crm/leads/:id - Content check if header value of 'Operation-Location' has a minimum length of '5'\", function() {\n  pm.expect(pm.response.headers.get(\"Operation-Location\").length).is.at.least(5);\n});\n",
                  "// Response header should have a maximum length of \"20\" for \"Operation-Location\"\npm.test(\"[GET]::/crm/leads/:id - Content check if header value of 'Operation-Location' has a maximum length of '20'\", function() {\n  pm.expect(pm.response.headers.get(\"Operation-Location\").length).is.at.most(20);\n});\n",
                  "// Response header value for \"Operation-Location}\" \"not.to.be.undefined\"\npm.test(\"[GET]::/crm/leads/:id - Content check if header value for 'Operation-Location' 'not.to.be.undefined'\", function() {\n  pm.expect(pm.response.headers.get(\"Operation-Location\")).not.to.be.undefined;\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "b2027282-acd1-4db2-a08b-e7744cf7f83c",
          "name": "Update lead",
          "request": {
            "name": "Update lead",
            "description": {
              "content": "Update lead",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "crm",
                "leads",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Include raw response. Mostly used for debugging purposes",
                    "type": "text/plain"
                  },
                  "key": "raw",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of the record you are acting upon.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "1234567890ABC",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "(Required) ID of the consumer which you want to get or push data from",
                  "type": "text/plain"
                },
                "key": "x-apideck-consumer-id",
                "value": "my-consumer-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "(Required) The ID of your Unify application",
                  "type": "text/plain"
                },
                "key": "x-apideck-app-id",
                "value": "my-app-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.",
                  "type": "text/plain"
                },
                "key": "x-apideck-service-id",
                "value": "pipedrive"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Elon Musk\",\n  \"company_name\": \"Spacex\",\n  \"owner_id\": \"54321\",\n  \"company_id\": \"2\",\n  \"contact_id\": \"2\",\n  \"first_name\": \"Elon\",\n  \"last_name\": \"Musk\",\n  \"description\": \"A thinker\",\n  \"prefix\": \"Sir\",\n  \"title\": \"CEO\",\n  \"status\": \"New\",\n  \"monetary_amount\": 75000,\n  \"currency\": \"USD\",\n  \"fax\": \"+12129876543\",\n  \"websites\": [\n    {\n      \"url\": \"http://example.com\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    },\n    {\n      \"url\": \"http://example.com\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    }\n  ],\n  \"addresses\": [\n    {\n      \"id\": \"123\",\n      \"type\": \"primary\",\n      \"name\": \"HQ US\",\n      \"line1\": \"Main street\",\n      \"line2\": \"apt #\",\n      \"city\": \"San Francisco\",\n      \"state\": \"CA\",\n      \"postal_code\": \"94104\",\n      \"country\": \"US\",\n      \"latitude\": \"40.759211\",\n      \"longitude\": \"-73.984638\"\n    },\n    {\n      \"id\": \"123\",\n      \"type\": \"primary\",\n      \"name\": \"HQ US\",\n      \"line1\": \"Main street\",\n      \"line2\": \"apt #\",\n      \"city\": \"San Francisco\",\n      \"state\": \"CA\",\n      \"postal_code\": \"94104\",\n      \"country\": \"US\",\n      \"latitude\": \"40.759211\",\n      \"longitude\": \"-73.984638\"\n    }\n  ],\n  \"social_links\": [\n    {\n      \"url\": \"https://www.twitter.com/apideck-io\",\n      \"id\": \"12345\",\n      \"type\": \"twitter\"\n    },\n    {\n      \"url\": \"https://www.twitter.com/apideck-io\",\n      \"id\": \"12345\",\n      \"type\": \"twitter\"\n    }\n  ],\n  \"phone_numbers\": [\n    {\n      \"number\": \"111-111-1111\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    },\n    {\n      \"number\": \"111-111-1111\",\n      \"id\": \"12345\",\n      \"type\": \"primary\"\n    }\n  ],\n  \"emails\": [\n    {\n      \"email\": \"elon@musk.com\",\n      \"id\": \"123\",\n      \"type\": \"primary\"\n    },\n    {\n      \"email\": \"elon@musk.com\",\n      \"id\": \"123\",\n      \"type\": \"primary\"\n    }\n  ],\n  \"custom_fields\": [\n    {\n      \"id\": \"custom_technologies\",\n      \"value\": \"Uses Salesforce and Marketo\"\n    },\n    {\n      \"id\": \"custom_technologies\",\n      \"value\": \"Uses Salesforce and Marketo\"\n    }\n  ],\n  \"tags\": [\n    \"New\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "any",
                  "value": "<Bearer Token>",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8fcc19f2-0f54-4fe8-b34f-49a70c1bc7e1",
          "name": "Delete lead",
          "request": {
            "name": "Delete lead",
            "description": {
              "content": "Delete lead",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "crm",
                "leads",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Include raw response. Mostly used for debugging purposes",
                    "type": "text/plain"
                  },
                  "key": "raw",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of the record you are acting upon.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "1234567890ABC",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "(Required) ID of the consumer which you want to get or push data from",
                  "type": "text/plain"
                },
                "key": "x-apideck-consumer-id",
                "value": "my-consumer-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "(Required) The ID of your Unify application",
                  "type": "text/plain"
                },
                "key": "x-apideck-app-id",
                "value": "my-app-id"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.",
                  "type": "text/plain"
                },
                "key": "x-apideck-service-id",
                "value": "pipedrive"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "any",
                  "value": "<Bearer Token>",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "type": "any",
        "value": "<Bearer Token>",
        "key": "token"
      }
    ]
  },
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://localhost:3050",
      "key": "baseUrl"
    },
    {
      "type": "string",
      "value": "",
      "key": "managementApiKey"
    },
    {
      "type": "string",
      "value": "[replace with valid token]",
      "key": "bearerToken"
    },
    {
      "type": "string",
      "value": "1111",
      "key": "applicationId"
    },
    {
      "type": "string",
      "value": "zoho-crm",
      "key": "serviceId"
    },
    {
      "type": "string",
      "value": "test_user_id",
      "key": "consumerId"
    }
  ],
  "info": {
    "_postman_id": "90901a91-1bf4-43bb-90f7-b82d7e4a57e2",
    "name": "CRM API - Content Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Welcome to the CRM API from Apideck.\n\nContact Support:\n Email: hello@apideck.com",
      "type": "text/plain"
    }
  }
}