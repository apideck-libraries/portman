import { OpenApiParser, PostmanParser } from 'application'
import fs from 'fs-extra'
import path from 'path'
import { Collection } from 'postman-collection'
import { generateForSuccessStatus, OasMappedOperation, PostmanMappedOperation } from '../lib'

export interface TestSuiteServiceOptions {
  oasParser: OpenApiParser
  postmanParser: PostmanParser
  testSuiteConfigFile: string
}

export class TestSuiteService {
  public collection: Collection

  oasParser: OpenApiParser
  postmanParser: PostmanParser
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  config: any

  constructor(options: TestSuiteServiceOptions) {
    const { oasParser, postmanParser, testSuiteConfigFile } = options

    this.oasParser = oasParser
    this.postmanParser = postmanParser
    this.config = JSON.parse(fs.readFileSync(path.resolve(testSuiteConfigFile)).toString())

    this.collection = postmanParser.collection
  }

  public generateAutomatedTests = (): PostmanMappedOperation[] => {
    return this.postmanParser.mappedOperations.map(pmOperation => {
      // Get OpenApi responses
      const oaOperation = this.oasParser.getOperationByPath(pmOperation.pathRef)

      // Generate response checks
      if (oaOperation) {
        pmOperation = this.injectAutoGenerated(pmOperation, oaOperation)
      }

      return pmOperation
    })
  }

  responseChecks = (): string[] => {
    const { responseChecks } = this.config.generateTests
    return Object.keys(responseChecks).map(key => key)
  }

  injectAutoGenerated = (
    pmOperation: PostmanMappedOperation,
    oaOperation: OasMappedOperation
  ): PostmanMappedOperation => {
    const responseChecks = this.responseChecks()

    if (responseChecks.includes('statusSuccess')) {
      pmOperation = generateForSuccessStatus(pmOperation, oaOperation)
    }
    return pmOperation
  }
}
