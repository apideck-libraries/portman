// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testResponseBodyContent should add content test for property check & number value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"75000\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data[0].monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' matches '75000'\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.eql(75000);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & pm variable value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"{{postman_env_variable}}\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data[0].monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' matches '{{postman_env_variable}}'\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.eql(pm.collectionVariables.get(\\"postman_env_variable\\"));
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result contains pm variable value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should contain value \\"{{postman_env_variable}}\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data[0].monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' contains '{{postman_env_variable}}'\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.include(pm.collectionVariables.get(\\"postman_env_variable\\"));
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result contains value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should contain value \\"Musk\\" for \\"data[0].name\\"
if (jsonData?.data[0].name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].name' contains 'Musk'\\", function() {
  pm.expect(jsonData.data[0].name).to.include(\\"Musk\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a length of \\"9\\" for \\"data[0].description\\"
if (jsonData?.data[0].description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a length of '9'\\", function() {
  pm.expect(jsonData.data[0].description.length).to.equal(9);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"9\\" for \\"data[0].description\\"
if (jsonData?.data[0].description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a minimum length of '9'\\", function() {
  pm.expect(jsonData.data[0].description.length).is.at.least(9);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has minimum length value 2`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a maximum length of \\"9\\" for \\"data[0].description\\"
if (jsonData?.data[0].description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a maximum length of '9'\\", function() {
  pm.expect(jsonData.data[0].description.length).is.at.most(9);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check without value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
]
`;

exports[`testResponseBodyContent should add content test for string for property check & boolean value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"true\\" for \\"data[0].company_name\\"
if (jsonData?.data[0].company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].company_name' matches 'true'\\", function() {
  pm.expect(jsonData.data[0].company_name).to.eql(true);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for string for property check & string value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have property \\"data[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if property 'data[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"Spacex\\" for \\"data[0].company_name\\"
if (jsonData?.data[0].company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].company_name' matches 'Spacex'\\", function() {
  pm.expect(jsonData.data[0].company_name).to.eql(\\"Spacex\\");
})};
",
]
`;
