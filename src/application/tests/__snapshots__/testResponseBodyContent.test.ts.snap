// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testResponseBodyContent should add content test for  root array & result has maximum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"ROOT\\"
pm.test(\\"[GET]::/crm/companies - Content check if 'ROOT' exists\\", function() {
   pm.expect((typeof jsonData !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a maximum length of \\"10\\" for \\"ROOT\\"
if (jsonData) {
pm.test(\\"[GET]::/crm/companies - Content check if value of 'ROOT' has a maximum length of '10'\\", function() {
  pm.expect(jsonData.length).is.at.most(10);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for a property & custom assert 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body value for \\"[0].data\\" \\"should.be.not.null\\"
if (jsonData?.[0]?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data' 'should.be.not.null'\\", function() {
  pm.expect(jsonData[0].data).should.be.not.null;
})};
",
]
`;

exports[`testResponseBodyContent should add content test for a property & single quotes custom assert 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body value for \\"[0].data\\" \\"to.be.an(\\"array\\")\\"
if (jsonData?.[0]?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data' 'to.be.an('array')'\\", function() {
  pm.expect(jsonData[0].data).to.be.an(\\"array\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for a property & unclean custom assert 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body value for \\"[0].data\\" \\"should.be.not.null\\"
if (jsonData?.[0]?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data' 'should.be.not.null'\\", function() {
  pm.expect(jsonData[0].data).should.be.not.null;
})};
",
]
`;

exports[`testResponseBodyContent should add content test for a property & unclean single quotes custom assert 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body value for \\"[0].data\\" \\"to.be.an(\\"array\\")\\"
if (jsonData?.[0]?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data' 'to.be.an('array')'\\", function() {
  pm.expect(jsonData[0].data).to.be.an(\\"array\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for array bracket check & result for a value that does not exist 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should not have \\"[0]['hydra:member']\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0]['hydra:member']' not exists\\", function() {
   pm.expect((typeof jsonData[0]['hydra:member'] === \\"undefined\\")).to.be.true;
});
",
]
`;

exports[`testResponseBodyContent should add content test for array bracket check & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0]['hydra:member']\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0]['hydra:member']' exists\\", function() {
   pm.expect((typeof jsonData[0]['hydra:member'] !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"1\\" for \\"[0]['hydra:member']\\"
if (jsonData?.[0]?.['hydra:member']) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of '[0]['hydra:member']' has a minimum length of '1'\\", function() {
  pm.expect(jsonData[0]['hydra:member'].length).is.at.least(1);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for bracket array property check & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].['hydra:member']\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].['hydra:member']' exists\\", function() {
   pm.expect((typeof jsonData[0].['hydra:member'] !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"1\\" for \\"[0].['hydra:member']\\"
if (jsonData?.[0]?.['hydra:member']) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of '[0].['hydra:member']' has a minimum length of '1'\\", function() {
  pm.expect(jsonData[0].['hydra:member'].length).is.at.least(1);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for bracket property check & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data['hydra:member']\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data['hydra:member']' exists\\", function() {
   pm.expect((typeof jsonData.data['hydra:member'] !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"1\\" for \\"data['hydra:member']\\"
if (jsonData?.data?.['hydra:member']) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data['hydra:member']' has a minimum length of '1'\\", function() {
  pm.expect(jsonData.data['hydra:member'].length).is.at.least(1);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & empty value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data?.[0]?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' matches ''\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.eql(\\"\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & number value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"75000\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data?.[0]?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' matches '75000'\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.eql(75000);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & oneOf number values 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"status_code\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'status_code' exists\\", function() {
   pm.expect((typeof jsonData.status_code !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should be one of the values \\"200,201\\" for \\"status_code\\"
if (jsonData?.status_code) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'status_code' is matching one of: '200,201'\\", function() {
  pm.expect(jsonData.status_code).to.be.oneOf([200,201]);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & pm variable value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"{{postman_env_variable}}\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data?.[0]?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' matches '{{postman_env_variable}}'\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.eql(pm.collectionVariables.get(\\"postman_env_variable\\"));
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result contains pm variable value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should contain value \\"{{postman_env_variable}}\\" for \\"data[0].monetary_amount\\"
if (jsonData?.data?.[0]?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].monetary_amount' contains '{{postman_env_variable}}'\\", function() {
  pm.expect(jsonData.data[0].monetary_amount).to.include(pm.collectionVariables.get(\\"postman_env_variable\\"));
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result contains value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should contain value \\"Musk\\" for \\"data[0].name\\"
if (jsonData?.data?.[0]?.name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].name' contains 'Musk'\\", function() {
  pm.expect(jsonData.data[0].name).to.include(\\"Musk\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a length of \\"9\\" for \\"data[0].description\\"
if (jsonData?.data?.[0]?.description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a length of '9'\\", function() {
  pm.expect(jsonData.data[0].description.length).to.equal(9);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has maximum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data' exists\\", function() {
   pm.expect((typeof jsonData.data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a maximum length of \\"10\\" for \\"data\\"
if (jsonData?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data' has a maximum length of '10'\\", function() {
  pm.expect(jsonData.data.length).is.at.most(10);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data' exists\\", function() {
   pm.expect((typeof jsonData.data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"1\\" for \\"data\\"
if (jsonData?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data' has a minimum length of '1'\\", function() {
  pm.expect(jsonData.data.length).is.at.least(1);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has zero length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a length of \\"0\\" for \\"data[0].description\\"
if (jsonData?.data?.[0]?.description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a length of '0'\\", function() {
  pm.expect(jsonData.data[0].description.length).to.equal(0);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has zero maximum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a maximum length of \\"0\\" for \\"data[0].description\\"
if (jsonData?.data?.[0]?.description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a maximum length of '0'\\", function() {
  pm.expect(jsonData.data[0].description.length).is.at.most(0);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check & result has zero minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].description' exists\\", function() {
   pm.expect((typeof jsonData.data[0].description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"0\\" for \\"data[0].description\\"
if (jsonData?.data?.[0]?.description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of 'data[0].description' has a minimum length of '0'\\", function() {
  pm.expect(jsonData.data[0].description.length).is.at.least(0);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for property check that does not exist 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should not have \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].monetary_amount' not exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount === \\"undefined\\")).to.be.true;
});
",
]
`;

exports[`testResponseBodyContent should add content test for property check without value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData.data[0].monetary_amount !== \\"undefined\\")).to.be.true;
});
",
]
`;

exports[`testResponseBodyContent should add content test for root array & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"ROOT\\"
pm.test(\\"[GET]::/crm/companies - Content check if 'ROOT' exists\\", function() {
   pm.expect((typeof jsonData !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"1\\" for \\"ROOT\\"
if (jsonData) {
pm.test(\\"[GET]::/crm/companies - Content check if value of 'ROOT' has a minimum length of '1'\\", function() {
  pm.expect(jsonData.length).is.at.least(1);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & number value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData[0].data.monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"75000\\" for \\"[0].data.monetary_amount\\"
if (jsonData?.[0]?.data?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data.monetary_amount' matches '75000'\\", function() {
  pm.expect(jsonData[0].data.monetary_amount).to.eql(75000);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & pm variable value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData[0].data.monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"{{postman_env_variable}}\\" for \\"[0].data.monetary_amount\\"
if (jsonData?.[0]?.data?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data.monetary_amount' matches '{{postman_env_variable}}'\\", function() {
  pm.expect(jsonData[0].data.monetary_amount).to.eql(pm.collectionVariables.get(\\"postman_env_variable\\"));
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & result contains pm variable value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData[0].data.monetary_amount !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should contain value \\"{{postman_env_variable}}\\" for \\"[0].data.monetary_amount\\"
if (jsonData?.[0]?.data?.monetary_amount) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data.monetary_amount' contains '{{postman_env_variable}}'\\", function() {
  pm.expect(jsonData[0].data.monetary_amount).to.include(pm.collectionVariables.get(\\"postman_env_variable\\"));
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & result contains value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.name' exists\\", function() {
   pm.expect((typeof jsonData[0].data.name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should contain value \\"Musk\\" for \\"[0].data.name\\"
if (jsonData?.[0]?.data?.name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data.name' contains 'Musk'\\", function() {
  pm.expect(jsonData[0].data.name).to.include(\\"Musk\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & result has length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.description\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.description' exists\\", function() {
   pm.expect((typeof jsonData[0].data.description !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a length of \\"9\\" for \\"[0].data.description\\"
if (jsonData?.[0]?.data?.description) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of '[0].data.description' has a length of '9'\\", function() {
  pm.expect(jsonData[0].data.description.length).to.equal(9);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & result has maximum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a maximum length of \\"10\\" for \\"[0].data\\"
if (jsonData?.[0]?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of '[0].data' has a maximum length of '10'\\", function() {
  pm.expect(jsonData[0].data.length).is.at.most(10);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & result has minimum length value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have a minimum length of \\"1\\" for \\"[0].data\\"
if (jsonData?.[0]?.data) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value of '[0].data' has a minimum length of '1'\\", function() {
  pm.expect(jsonData[0].data.length).is.at.least(1);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check & result oneOf value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.name' exists\\", function() {
   pm.expect((typeof jsonData[0].data.name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should be one of the values \\"Spacex,Tesla\\" for \\"[0].data.name\\"
if (jsonData?.[0]?.data?.name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data.name' is matching one of: 'Spacex,Tesla'\\", function() {
  pm.expect(jsonData[0].data.name).to.be.oneOf([\\"Spacex\\",\\"Tesla\\"]);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for root array property check without value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.monetary_amount\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.monetary_amount' exists\\", function() {
   pm.expect((typeof jsonData[0].data.monetary_amount !== \\"undefined\\")).to.be.true;
});
",
]
`;

exports[`testResponseBodyContent should add content test for string for property check & boolean value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"true\\" for \\"data[0].company_name\\"
if (jsonData?.data?.[0]?.company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].company_name' matches 'true'\\", function() {
  pm.expect(jsonData.data[0].company_name).to.eql(true);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for string for property check & oneOf boolean values 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should be one of the values \\"true,false\\" for \\"data[0].company_name\\"
if (jsonData?.data?.[0]?.company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].company_name' is matching one of: 'true,false'\\", function() {
  pm.expect(jsonData.data[0].company_name).to.be.oneOf([true,false]);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for string for property check & oneOf string values 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should be one of the values \\"Spacex,Tesla\\" for \\"data[0].company_name\\"
if (jsonData?.data?.[0]?.company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].company_name' is matching one of: 'Spacex,Tesla'\\", function() {
  pm.expect(jsonData.data[0].company_name).to.be.oneOf([\\"Spacex\\",\\"Tesla\\"]);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for string for property check & string value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"data[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if 'data[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData.data[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"Spacex\\" for \\"data[0].company_name\\"
if (jsonData?.data?.[0]?.company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for 'data[0].company_name' matches 'Spacex'\\", function() {
  pm.expect(jsonData.data[0].company_name).to.eql(\\"Spacex\\");
})};
",
]
`;

exports[`testResponseBodyContent should add content test for string for root array property check & boolean value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data.company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data.company_name' exists\\", function() {
   pm.expect((typeof jsonData[0].data.company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"true\\" for \\"[0].data.company_name\\"
if (jsonData?.[0]?.data?.company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].data.company_name' matches 'true'\\", function() {
  pm.expect(jsonData[0].data.company_name).to.eql(true);
})};
",
]
`;

exports[`testResponseBodyContent should add content test for string for root array property check & string value 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].company_name\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].company_name' exists\\", function() {
   pm.expect((typeof jsonData[0].company_name !== \\"undefined\\")).to.be.true;
});
",
  "// Response body should have value \\"Spacex\\" for \\"[0].company_name\\"
if (jsonData?.[0]?.company_name) {
pm.test(\\"[GET]::/crm/companies/:id - Content check if value for '[0].company_name' matches 'Spacex'\\", function() {
  pm.expect(jsonData[0].company_name).to.eql(\\"Spacex\\");
})};
",
]
`;

exports[`testResponseBodyContent should not add content test for a property when assert is empty 1`] = `
Array [
  "// Set response object as internal variable
let jsonData = {};
try {jsonData = pm.response.json();}catch(e){}
",
  "// Response body should have \\"[0].data\\"
pm.test(\\"[GET]::/crm/companies/:id - Content check if '[0].data' exists\\", function() {
   pm.expect((typeof jsonData[0].data !== \\"undefined\\")).to.be.true;
});
",
]
`;
