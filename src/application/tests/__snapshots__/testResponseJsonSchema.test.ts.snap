// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testResponseJsonSchema should add extra unknown formats 1`] = `
Array [
  "// Response Validation
const schema = {\\"application/json\\":{\\"schema\\":{\\"x-graphql-type-name\\":\\"company\\",\\"type\\":\\"object\\",\\"required\\":[\\"status_code\\",\\"status\\",\\"service\\",\\"resource\\",\\"operation\\",\\"data\\"],\\"properties\\":{\\"status_code\\":{\\"type\\":\\"integer\\",\\"description\\":\\"HTTP Response Status Code\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"HTTP Response Status\\"},\\"service\\":{\\"type\\":\\"string\\",\\"description\\":\\"Apideck ID of service provider\\"},\\"resource\\":{\\"type\\":\\"string\\",\\"description\\":\\"Unified API resource name\\"},\\"operation\\":{\\"type\\":\\"string\\",\\"description\\":\\"Operation performed\\"},\\"data\\":{\\"type\\":\\"object\\",\\"required\\":[\\"name\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"name\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"interaction_count\\":{\\"type\\":[\\"integer\\",\\"null\\"]},\\"owner_id\\":{\\"type\\":\\"string\\"},\\"image_url\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"description\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"vat_number\\":{\\"description\\":\\"VAT number\\",\\"type\\":[\\"string\\",\\"null\\"]},\\"currency\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"status\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"minLength\\":1},\\"fax\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"bank_accounts\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"iban\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"bic\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"websites\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"url\\"],\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"url\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"WebsiteType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"other\\"]}}}},\\"addresses\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"AddressType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"shipping\\",\\"billing\\",\\"other\\"]},\\"name\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"line1\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Line 1 of the address e.g. number, street, suite, apt #, etc.\\"},\\"line2\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Line 2 of the address\\"},\\"city\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Name of city.\\"},\\"state\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Name of state\\"},\\"postal_code\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Zip code or equivalent.\\"},\\"country\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"country code according to ISO 3166-1 alpha-2.\\"},\\"latitude\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"longitude\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"social_links\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"url\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"url\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"phone_numbers\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"number\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"number\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"PhoneType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"mobile\\",\\"assistant\\",\\"fax\\",\\"other\\"]}}}},\\"emails\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"email\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"email\\":{\\"type\\":\\"string\\",\\"format\\":\\"email\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"EmailType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"billing\\",\\"other\\"]}}}},\\"custom_fields\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"id\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"value\\":{\\"anyOf\\":[{\\"type\\":[\\"string\\",\\"null\\"]},{\\"type\\":[\\"number\\",\\"null\\"]},{\\"type\\":[\\"boolean\\",\\"null\\"]},{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}}]}}}},\\"tags\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"updated_by\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"created_by\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"updated_at\\":{\\"type\\":\\"string\\"},\\"created_at\\":{\\"type\\":\\"string\\"}}}}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\", \\"abc\\", \\"xyz\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should add test for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"x-graphql-type-name\\":\\"company\\",\\"type\\":\\"object\\",\\"required\\":[\\"status_code\\",\\"status\\",\\"service\\",\\"resource\\",\\"operation\\",\\"data\\"],\\"properties\\":{\\"status_code\\":{\\"type\\":\\"integer\\",\\"description\\":\\"HTTP Response Status Code\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"HTTP Response Status\\"},\\"service\\":{\\"type\\":\\"string\\",\\"description\\":\\"Apideck ID of service provider\\"},\\"resource\\":{\\"type\\":\\"string\\",\\"description\\":\\"Unified API resource name\\"},\\"operation\\":{\\"type\\":\\"string\\",\\"description\\":\\"Operation performed\\"},\\"data\\":{\\"type\\":\\"object\\",\\"required\\":[\\"name\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"name\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"interaction_count\\":{\\"type\\":[\\"integer\\",\\"null\\"]},\\"owner_id\\":{\\"type\\":\\"string\\"},\\"image_url\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"description\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"vat_number\\":{\\"description\\":\\"VAT number\\",\\"type\\":[\\"string\\",\\"null\\"]},\\"currency\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"status\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"minLength\\":1},\\"fax\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"bank_accounts\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"iban\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"bic\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"websites\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"url\\"],\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"url\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"WebsiteType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"other\\"]}}}},\\"addresses\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"AddressType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"shipping\\",\\"billing\\",\\"other\\"]},\\"name\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"line1\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Line 1 of the address e.g. number, street, suite, apt #, etc.\\"},\\"line2\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Line 2 of the address\\"},\\"city\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Name of city.\\"},\\"state\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Name of state\\"},\\"postal_code\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Zip code or equivalent.\\"},\\"country\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"country code according to ISO 3166-1 alpha-2.\\"},\\"latitude\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"longitude\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"social_links\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"url\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"url\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"phone_numbers\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"number\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"number\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"PhoneType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"mobile\\",\\"assistant\\",\\"fax\\",\\"other\\"]}}}},\\"emails\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"email\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"email\\":{\\"type\\":\\"string\\",\\"format\\":\\"email\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"EmailType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"billing\\",\\"other\\"]}}}},\\"custom_fields\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"id\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"value\\":{\\"anyOf\\":[{\\"type\\":[\\"string\\",\\"null\\"]},{\\"type\\":[\\"number\\",\\"null\\"]},{\\"type\\":[\\"boolean\\",\\"null\\"]},{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}}]}}}},\\"tags\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"updated_by\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"created_by\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"updated_at\\":{\\"type\\":\\"string\\"},\\"created_at\\":{\\"type\\":\\"string\\"}}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should add test with separator symbol for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"application/json\\":{\\"schema\\":{\\"x-graphql-type-name\\":\\"company\\",\\"type\\":\\"object\\",\\"required\\":[\\"status_code\\",\\"status\\",\\"service\\",\\"resource\\",\\"operation\\",\\"data\\"],\\"properties\\":{\\"status_code\\":{\\"type\\":\\"integer\\",\\"description\\":\\"HTTP Response Status Code\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"HTTP Response Status\\"},\\"service\\":{\\"type\\":\\"string\\",\\"description\\":\\"Apideck ID of service provider\\"},\\"resource\\":{\\"type\\":\\"string\\",\\"description\\":\\"Unified API resource name\\"},\\"operation\\":{\\"type\\":\\"string\\",\\"description\\":\\"Operation performed\\"},\\"data\\":{\\"type\\":\\"object\\",\\"required\\":[\\"name\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"name\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"interaction_count\\":{\\"type\\":[\\"integer\\",\\"null\\"]},\\"owner_id\\":{\\"type\\":\\"string\\"},\\"image_url\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"description\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"vat_number\\":{\\"description\\":\\"VAT number\\",\\"type\\":[\\"string\\",\\"null\\"]},\\"currency\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"status\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"minLength\\":1},\\"fax\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"bank_accounts\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"iban\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"bic\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"websites\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"url\\"],\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"url\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"WebsiteType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"other\\"]}}}},\\"addresses\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"AddressType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"shipping\\",\\"billing\\",\\"other\\"]},\\"name\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"line1\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Line 1 of the address e.g. number, street, suite, apt #, etc.\\"},\\"line2\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Line 2 of the address\\"},\\"city\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Name of city.\\"},\\"state\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Name of state\\"},\\"postal_code\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"Zip code or equivalent.\\"},\\"country\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"description\\":\\"country code according to ISO 3166-1 alpha-2.\\"},\\"latitude\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"longitude\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"social_links\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"url\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"url\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":[\\"string\\",\\"null\\"]}}}},\\"phone_numbers\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"number\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"number\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"PhoneType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"mobile\\",\\"assistant\\",\\"fax\\",\\"other\\"]}}}},\\"emails\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"email\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"email\\":{\\"type\\":\\"string\\",\\"format\\":\\"email\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"EmailType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"billing\\",\\"other\\"]}}}},\\"custom_fields\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"id\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"value\\":{\\"anyOf\\":[{\\"type\\":[\\"string\\",\\"null\\"]},{\\"type\\":[\\"number\\",\\"null\\"]},{\\"type\\":[\\"boolean\\",\\"null\\"]},{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}}]}}}},\\"tags\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"updated_by\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"created_by\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"updated_at\\":{\\"type\\":\\"string\\"},\\"created_at\\":{\\"type\\":\\"string\\"}}}}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]==/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on items levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on items levels, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on nested levels, for type array, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on nested levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on items levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on items levels, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on nested levels, for type array, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on nested levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should skip test for invalid json schema 1`] = `
Array [
  "// Response Validation - Disabled due to Invalid JSON Schema
console.log('GET]::/crm/companies/:id response is not being validated against your spec!');
",
]
`;

exports[`testResponseJsonSchema should skip test for json schema with $ref 1`] = `
Array [
  "// Response Validation - Disabled due to Circular Reference
console.log('GET]::/crm/companies/:id response is not being validated against your spec!');
",
]
`;

exports[`testResponseJsonSchema should toggle additional properties to false on nested levels for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"name\\":{\\"type\\":\\"string\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\"},\\"pool\\":{\\"type\\":\\"string\\"}},\\"additionalProperties\\":false},\\"maxItems\\":2}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}},\\"additionalProperties\\":false}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should toggle additional properties to true on nested levels for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"name\\":{\\"type\\":\\"string\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\"},\\"pool\\":{\\"type\\":\\"string\\"}},\\"additionalProperties\\":true},\\"maxItems\\":2}},\\"additionalProperties\\":true,\\"required\\":[\\"id\\",\\"name\\"]}}},\\"additionalProperties\\":true}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\", \\"float\\", \\"double\\"]});
});
",
]
`;
