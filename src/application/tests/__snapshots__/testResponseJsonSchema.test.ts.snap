// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testResponseJsonSchema should add test for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"application/json\\":{\\"schema\\":{\\"x-graphql-type-name\\":\\"company\\",\\"type\\":\\"object\\",\\"required\\":[\\"status_code\\",\\"status\\",\\"service\\",\\"resource\\",\\"operation\\",\\"data\\"],\\"properties\\":{\\"status_code\\":{\\"type\\":\\"integer\\",\\"description\\":\\"HTTP Response Status Code\\",\\"example\\":200},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"HTTP Response Status\\",\\"example\\":\\"OK\\"},\\"service\\":{\\"type\\":\\"string\\",\\"description\\":\\"Apideck ID of service provider\\",\\"example\\":\\"zoho-crm\\"},\\"resource\\":{\\"type\\":\\"string\\",\\"description\\":\\"Unified API resource name\\",\\"example\\":\\"companies\\"},\\"operation\\":{\\"type\\":\\"string\\",\\"description\\":\\"Operation performed\\",\\"example\\":\\"one\\"},\\"data\\":{\\"type\\":\\"object\\",\\"required\\":[\\"name\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"readOnly\\":true,\\"example\\":\\"12345\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"Copper\\",\\"minLength\\":1},\\"interaction_count\\":{\\"type\\":[\\"integer\\",\\"null\\"],\\"example\\":1,\\"readOnly\\":true},\\"owner_id\\":{\\"type\\":\\"string\\",\\"example\\":\\"12345\\"},\\"image_url\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"https://www.spacex.com/static/images/share.jpg\\"},\\"description\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"A crm that works for you, so you can spend time on relationships instead of data.\\"},\\"vat_number\\":{\\"description\\":\\"VAT number\\",\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"BE0689615164\\"},\\"currency\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"USD\\"},\\"status\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"minLength\\":1,\\"example\\":\\"Open\\"},\\"fax\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"+12129876543\\"},\\"bank_accounts\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"iban\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"CH2989144532982975332\\"},\\"bic\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"AUDSCHGGXXX\\"}}}},\\"websites\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"url\\"],\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"12345\\"},\\"url\\":{\\"type\\":\\"string\\",\\"example\\":\\"http://example.com\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"WebsiteType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"other\\"],\\"example\\":\\"primary\\"}}}},\\"addresses\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"123\\"},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"AddressType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"shipping\\",\\"billing\\",\\"other\\"],\\"example\\":\\"primary\\"},\\"name\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"HQ US\\"},\\"line1\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"Main street\\",\\"description\\":\\"Line 1 of the address e.g. number, street, suite, apt #, etc.\\"},\\"line2\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"apt #\\",\\"description\\":\\"Line 2 of the address\\"},\\"city\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"San Francisco\\",\\"description\\":\\"Name of city.\\"},\\"state\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"CA\\",\\"description\\":\\"Name of state\\"},\\"postal_code\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"94104\\",\\"description\\":\\"Zip code or equivalent.\\"},\\"country\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"US\\",\\"description\\":\\"country code according to ISO 3166-1 alpha-2.\\"},\\"latitude\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"40.759211\\"},\\"longitude\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"-73.984638\\"}}}},\\"social_links\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"url\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"12345\\"},\\"url\\":{\\"type\\":\\"string\\",\\"example\\":\\"https://www.twitter.com/apideck-io\\",\\"minLength\\":1},\\"type\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"twitter\\"}}}},\\"phone_numbers\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"number\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"12345\\"},\\"number\\":{\\"type\\":\\"string\\",\\"example\\":\\"111-111-1111\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"PhoneType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"home\\",\\"office\\",\\"mobile\\",\\"assistant\\",\\"fax\\",\\"other\\"],\\"example\\":\\"primary\\"}}}},\\"emails\\":{\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"email\\"],\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"123\\"},\\"email\\":{\\"type\\":\\"string\\",\\"format\\":\\"email\\",\\"example\\":\\"elon@musk.com\\",\\"minLength\\":1},\\"type\\":{\\"type\\":\\"string\\",\\"x-graphql-type-name\\":\\"EmailType\\",\\"enum\\":[\\"primary\\",\\"secondary\\",\\"work\\",\\"personal\\",\\"billing\\",\\"other\\"],\\"example\\":\\"primary\\"}}}},\\"custom_fields\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"id\\"],\\"additionalProperties\\":false,\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"custom_technologies\\"},\\"value\\":{\\"anyOf\\":[{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"Uses Salesforce and Marketo\\"},{\\"type\\":[\\"number\\",\\"null\\"],\\"example\\":10},{\\"type\\":[\\"boolean\\",\\"null\\"],\\"example\\":true},{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}}]}}}},\\"tags\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"},\\"example\\":[\\"New\\"]},\\"updated_by\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"12345\\",\\"readOnly\\":true},\\"created_by\\":{\\"type\\":[\\"string\\",\\"null\\"],\\"example\\":\\"12345\\",\\"readOnly\\":true},\\"updated_at\\":{\\"type\\":\\"string\\",\\"example\\":\\"2020-09-30T07:43:32.000Z\\",\\"readOnly\\":true},\\"created_at\\":{\\"type\\":\\"string\\",\\"example\\":\\"2020-09-30T07:43:32.000Z\\",\\"readOnly\\":true}}}}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on items levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on items levels, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on nested levels, for type array, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove maxItems on nested levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on items levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on items levels, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"array\\",\\"items\\":{\\"required\\":[\\"name\\"],\\"properties\\":{\\"id\\":{\\"type\\":\\"integer\\",\\"example\\":10},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"doggie\\"},\\"status\\":{\\"type\\":\\"string\\",\\"description\\":\\"pet status in the store\\",\\"enum\\":[\\"available\\"]}},\\"type\\":\\"object\\"}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on nested levels, for type array, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should remove minItems on nested levels, for types array/null, for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":[\\"array\\",\\"null\\"],\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}}}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should skip test for invalid json schema 1`] = `
Array [
  "// Response Validation Disabled due to Circular Reference
console.log('companiesOne response is not being validated against your spec!');
",
]
`;

exports[`testResponseJsonSchema should toggle additional properties to false on nested levels for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":false}}},\\"additionalProperties\\":false,\\"required\\":[\\"id\\",\\"name\\"]}}},\\"additionalProperties\\":false}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;

exports[`testResponseJsonSchema should toggle additional properties to true on nested levels for valid json schema 1`] = `
Array [
  "// Response Validation
const schema = {\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\",\\"example\\":\\"p1\\"},\\"name\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"},\\"ips\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"portMapping\\":{\\"type\\":\\"integer\\",\\"example\\":255},\\"pool\\":{\\"type\\":\\"string\\",\\"example\\":\\"G-1\\"}},\\"additionalProperties\\":true}}},\\"additionalProperties\\":true,\\"required\\":[\\"id\\",\\"name\\"]}}},\\"additionalProperties\\":true}

// Validate if response matches JSON schema 
pm.test(\\"[GET]::/crm/companies/:id - Schema is valid\\", function() {
    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\\"int32\\", \\"int64\\"]});
});
",
]
`;
